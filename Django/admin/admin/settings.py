"""
Django settings for admin project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-j2rgzc@1y(760p=knx$%$qt1_vzvu10!6z_^2xd&q$!gm*vpe1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['172.17.0.1','localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'products',
    'structlog',
    'django_structlog'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'django_structlog.middlewares.StructLogMiddleware',
    'products.middleware.StructLogMiddleware'
]

ROOT_URLCONF = 'admin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'admin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'admin',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': 'db',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ORIGIN_ALLOW_ALL = True

import os
import structlog
import logging
import uuid

'''LOGGING = {
    'version':1,
    'loggers':{ #Entry point to logging system
        'django':{
            'handlers':['file_debug','file_info','file_warning','file_error','file_critical'],
            'level':'DEBUG',
        },
    },
    'handlers':{
        'file_debug':{
            'level':'DEBUG',
            'class':'logging.FileHandler',
            'filename':'./debug.log',
            'formatter':'simpleRe',
        },
        'file_info':{
            'level':'INFO',
            'class':'logging.FileHandler',
            'filename':'./info.log',
            'formatter':'simpleRe',
        },
        'file_warning':{
            'level':'WARNING',
            'class':'logging.FileHandler',
            'filename':'./warning.log',
            'formatter':'simpleRe',
        },
        'file_error':{
            'level':'ERROR',
            'class':'logging.FileHandler',
            'filename':'./error.log',
            'formatter':'simpleRe',
        },
        'file_critical':{
            'level':'CRITICAL',
            'class':'logging.FileHandler',
            'filename':'./critical.log',
            'formatter':'simpleRe',
        },
    },
    'formatters':{
    'simpleRe':{
        'format':'{levelname} {asctime} {module} {message}',
        'style':'{',
    }
    }
}'''
'''LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers':{
        'file_debug':{
            'level':'DEBUG',
            'class':'logging.FileHandler',
            'filename':'./debug.log',
            'formatter': 'json'
        },
        'file_info':{
            'level':'INFO',
            'class':'logging.FileHandler',
            'filename':'./info.log',
            'formatter': 'json'
        },
        'file_warning':{
            'level':'WARNING',
            'class':'logging.FileHandler',
            'filename':'./warning.log',
            'formatter': 'json'
        },
        'file_error':{
            'level':'ERROR',
            'class':'logging.FileHandler',
            'filename':'./error.log',
            'formatter': 'json'
        },
        'file_critical':{
            'level':'CRITICAL',
            'class':'logging.FileHandler',
            'filename':'./critical.log',
            'formatter': 'json'
        },
    },
    'formatters':{
        'json': {
            'class': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(asctime)s %(name)s %(levelname)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        }
    },
    'loggers':{ 
        'django':{
            'handlers':['file_debug'],
            'level':'DEBUG',
            'propagate': True,
        },
        'django':{
            'handlers':['file_info'],
            'level':'INFO',
            'propagate': True,
        },
        'django':{
            'handlers':['file_warning'],
            'level':'WARNING',
            'propagate': True,
        },
        'django':{
            'handlers':['file_error'],
            'level':'ERROR',
            'propagate': True,
        },
        'django':{
            'handlers':['file_critical'],
            'level':'CRITICAL',
            'propagate': True,
        },
    },
}'''


'''LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'loggers':{ 
        'django':{
            'handlers':['file_debug'],
            'level':'DEBUG',
            'propagate': True,
        },
        'django':{
            'handlers':['file_info'],
            'level':'INFO',
            'propagate': True,
        },
        'django':{
            'handlers':['file_warning'],
            'level':'WARNING',
            'propagate': True,
        },
        'django':{
            'handlers':['file_error'],
            'level':'ERROR',
            'propagate': True,
        },
        'django':{
            'handlers':['file_critical'],
            'level':'CRITICAL',
            'propagate': True,
        },
    },
    'handlers':{
        'file_debug':{
            'level':'DEBUG',
            'class':'logging.FileHandler',
            'filename':'./debug.log',
            'formatter': 'json'
        },
        'file_info':{
            'level':'INFO',
            'class':'logging.FileHandler',
            'filename':'./info.json',
            'formatter': 'json'
        },
        'file_warning':{
            'level':'WARNING',
            'class':'logging.FileHandler',
            'filename':'./warning.log',
            'formatter': 'json'
        },
        'file_error':{
            'level':'ERROR',
            'class':'logging.FileHandler',
            'filename':'./error.log',
            'formatter': 'json'
        },
        'file_critical':{
            'level':'CRITICAL',
            'class':'logging.FileHandler',
            'filename':'./critical.log',
            'formatter': 'json'
        },
    },
    'formatters':{
        'json': {
            #'class': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            #'format': '%(asctime)s %(name)s %(levelname)s %(message)s',
            'format': '{"time":"%(asctime)s", "level":"%(levelname)s", "message":"%(message)s"}',
            #'datefmt': '%Y-%m-%d %H:%M:%S',
        }
    },
    
}'''
'''# working 
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            #'format': '{"time":"%(asctime)s", "level":"%(levelname)s", "message":"%(message)s"}'
            'format': '{"time":"%(asctime)s", "level":"%(levelname)s", "logger_name":"%(name)s", "module_name":"%(module)s", "func_name":"%(funcName)s", "line_number":"%(lineno)d", "message":"%(message)s", "exception":"%(exc_info)s", "caller":"%(pathname)s:%(lineno)d"}'
        }
    },
    'handlers': {
        'debug_file': {
            'class': 'logging.FileHandler',
            'filename': './debug.log',
            'formatter': 'json',
            'level': 'DEBUG'
        },
        'info_file': {
            'class': 'logging.FileHandler',
            'filename': './info.log',
            'formatter': 'json',
            'level': 'INFO'
        },
        'warning_file': {
            'class': 'logging.FileHandler',
            'filename': './warning.log',
            'formatter': 'json',
            'level': 'WARNING'
        },
        'error_file': {
            'class': 'logging.FileHandler',
            'filename': './error.log',
            'formatter': 'json',
            'level': 'ERROR'
        },
        'critical_file': {
            'class': 'logging.FileHandler',
            'filename': './critical.log',
            'formatter': 'json',
            'level': 'CRITICAL'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['debug_file', 'info_file', 'warning_file', 'error_file', 'critical_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'myapp': {
            'handlers': ['debug_file', 'info_file', 'warning_file', 'error_file', 'critical_file'],
            'level': 'INFO',
            'propagate': True,
        }, 
    },
}'''
'''LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'structlog',
        },
    },
    'formatters': {
        'structlog': {
            'format': '{"timestamp": "%(asctime)s", "level": "%(levelname)s", "message": "%(message)s", "user_id": "%(user_id)s"}',
            'class': 'structlog.stdlib.ProcessorFormatter',
            'processor': 'django_structlog.middlewares.StructLogProcessor',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}'''
'''LOGGING = { # Also works 
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'class': 'logging.FileHandler',
            'filename': './app.log', # Replace with actual path to log file
            'formatter': 'structlog',
            
        },
    },
    'loggers': {
        'django_structlog': {
            'handlers': ['file'], # Add file handler to list of handlers
            'level': 'DEBUG',
            'propagate': True
        },
        '': {  # 
            'handlers': ['file'],
            'level': 'DEBUG',
        },
    },
    'formatters': {
        'structlog': {
            #'format': '%(asctime)s %(levelname)-8s %(message)s',
            'format': '{"time":"%(asctime)s", "level":"%(levelname)s", "message":"%(message)s"}'
        },
    },
}
'''

def add_user_context(logger, method_name, event_dict):
    request = event_dict.get('request')
    if request is not None and request.user.is_authenticated:
        event_dict['user'] = str(request.user.id)
    else:
        event_dict['user'] = str(uuid.uuid4())
    return event_dict

LOGGING = { # Prints json logs on the console wroks fine !!!
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'json',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': './file.log',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'json',
        },
    },
    'formatters': {
        'json': {
            '()': 'structlog.stdlib.ProcessorFormatter',
            'processor': structlog.dev.ConsoleRenderer(colors=True),
            'foreign_pre_chain': [structlog.stdlib.add_log_level,
                                structlog.stdlib.add_logger_name,
                                structlog.processors.TimeStamper(fmt="iso"),
                                structlog.stdlib.PositionalArgumentsFormatter(),
                                add_user_context,
                                structlog.processors.StackInfoRenderer(),
                                structlog.processors.format_exc_info,
                                structlog.processors.UnicodeDecoder()
                                ],
            'processor': structlog.processors.JSONRenderer(),
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

